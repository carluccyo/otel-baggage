version: '3.9'

volumes:
  db_data: {}

services:
  # ********************
  # Telemetry Components
  # ********************

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"   # zipkin
    profiles:
      - all

  grafana:
    image: grafana/grafana:9.4.3
    volumes:
      - ./grafana/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"
    profiles:
      - all

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"
    profiles:
      - all


  # Collector
  otel-collector:
    image: otel/opentelemetry-collector:0.67.0
    restart: always
    command: ["--config=/etc/otel-collector-config.yaml", ""]
    volumes:
      - ./otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "55679:55679" # zpages extension
    depends_on:
      - tempo
    profiles:
      - all
  service_one_api:
    container_name: service_one_api
    build:
      context: .
    ports:
      - '8104:8004'
    command:
      - '/bin/sh'
      - '-c'
      - 'sleep 10;  npm run start'
    env_file:
      - .env
      - .env-one
    environment:
      - OTEL_SERVICE_NAME=service_one_api
    profiles:
      - all
      - service_one
  service_one_worker:
    container_name: service_one_worker
    build:
      context: .
    ports:
      - '8204:8004'
    command:
      - '/bin/sh'
      - '-c'
      - 'sleep 10;  npm run start-workers'
    env_file:
      - .env
      - .env-one
    environment:
      - OTEL_SERVICE_NAME=service_one_worker
    profiles:
        - do-not-start
#      - all
#      - service_one
  service_two_api:
    container_name: service_two_api
    build:
      context: .
    ports:
      - '8304:8004'
    command:
      - '/bin/sh'
      - '-c'
      - 'sleep 10;  npm run start'
    env_file:
      - .env
      - .env-two
    environment:
      - OTEL_SERVICE_NAME=service_two_api
    profiles:
      - all
      - service_two
  service_two_worker:
    container_name: service_two_worker
    build:
      context: .
      args:
        - GHP_TOKEN=$GH_TOKEN
    ports:
      - '8404:8004'
    command:
      - '/bin/sh'
      - '-c'
      - 'sleep 10;  npm run start'
    env_file:
      - .env
      - .env-two
    environment:
      - OTEL_SERVICE_NAME=service_two_worker
    profiles:
      - all
      - service_two

